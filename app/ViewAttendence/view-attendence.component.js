"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var page_1 = require("tns-core-modules/ui/page");
var router_1 = require("@angular/router");
var view_attendence_service_1 = require("./view-attendence.service");
var viewAttendence_1 = require("./viewAttendence");
var nativescript_angular_1 = require("nativescript-angular");
var localize = require("nativescript-localize");
var ViewAttendenceComponent = (function () {
    // This pattern makes use of Angular’s dependency injection implementation to inject an instance of the ItemService service into this class.
    // Angular knows about this service because it is included in your app’s main NgModule, defined in app.module.ts.
    function ViewAttendenceComponent(page, router, myservice, routerExtensions) {
        this.page = page;
        this.router = router;
        this.myservice = myservice;
        this.routerExtensions = routerExtensions;
    }
    ViewAttendenceComponent.prototype.ngOnInit = function () {
        this.date = new Date();
        this.today = this.date.getFullYear() + "-" + Number(this.date.getMonth() + 1) + "-" + this.date.getDate();
        this.showdate = this.date.getDate() + "-" + Number(this.date.getMonth() + 1) + "-" + this.date.getFullYear();
        this.get_attendence_today(this.today);
    };
    ViewAttendenceComponent.prototype.previous_date = function () {
        this.date.setDate(this.date.getDate() - 1);
        this.today = this.date.getFullYear() + "-" + Number(this.date.getMonth() + 1) + "-" + this.date.getDate();
        this.showdate = this.date.getDate() + "-" + Number(this.date.getMonth() + 1) + "-" + this.date.getFullYear();
        this.get_attendence_today(this.today);
    };
    ViewAttendenceComponent.prototype.next_date = function () {
        this.date.setDate(this.date.getDate() + 1);
        this.today = this.date.getFullYear() + "-" + Number(this.date.getMonth() + 1) + "-" + this.date.getDate();
        this.showdate = this.date.getDate() + "-" + Number(this.date.getMonth() + 1) + "-" + this.date.getFullYear();
        this.get_attendence_today(this.today);
    };
    ViewAttendenceComponent.prototype.get_attendence_today = function (data) {
        var _this = this;
        this.myservice.get_today_all_user_attendence_api({ search_date: data })
            .subscribe(function (res) {
            _this.onSuccess(res);
        }, function (error) {
            var string_response = JSON.stringify(error);
            //alert("user not exsist");
            alert(JSON.stringify(error._body.message));
        });
        //alert(this.id+this.password);
        //  this.router.navigate(["/supervisor"]);
    };
    ViewAttendenceComponent.prototype.onSuccess = function (res) {
        this.today_attendence_status = [];
        var string_response = JSON.stringify(res);
        var helper = JSON.parse(string_response);
        console.log(helper._body.records.length);
        // this.router.navigate(["/supervisor"]);
        for (var i = 0; i < helper._body.records.length; i++) {
            var att = new viewAttendence_1.ViewAttendence(helper._body.records[i].id, helper._body.records[i].name, helper._body.records[i].sidename, helper._body.records[i].overtime, helper._body.records[i].attendent, helper._body.records[i].status);
            this.today_attendence_status.push(att);
        }
        if (this.today_attendence_status.length == 0) {
            var ablayout = this.page.getViewById("notattendencefound");
            ablayout.visibility = "visible";
        }
        else {
            var ablayout = this.page.getViewById("notattendencefound");
            ablayout.visibility = "collapse";
        }
        console.log(JSON.stringify(this.today_attendence_status));
    };
    ViewAttendenceComponent.prototype.onviewlisttap = function (args) {
        console.log(args.index);
        var id = this.today_attendence_status[args.index].id;
        console.log(id);
        var ablayout = this.page.getViewById(id);
        if (ablayout.visibility == "visible") {
            ablayout.visibility = "collapse";
        }
        else {
            ablayout.visibility = "visible";
        }
    };
    ViewAttendenceComponent.prototype.goBack = function () {
        this.routerExtensions.backToPreviousPage();
    };
    ViewAttendenceComponent = __decorate([
        core_1.Component({
            selector: "ns-items",
            moduleId: module.id,
            templateUrl: "./view-attendence.component.html",
            styleUrls: ["view.css"]
        }),
        __metadata("design:paramtypes", [page_1.Page, router_1.Router, view_attendence_service_1.viewAttendenceService, nativescript_angular_1.RouterExtensions])
    ], ViewAttendenceComponent);
    return ViewAttendenceComponent;
}());
exports.ViewAttendenceComponent = ViewAttendenceComponent;
//# sourceMappingURL=data:application/json;base64,